
Node EventLoop：
Node中的Event Loop是基于libuv实现的，
而libuv是 Node 的新跨平台抽象层，libuv使用异步，
事件驱动的编程方式，核心是提供i/o的事件循环和异步回调。libuv的API包含有时间，非阻塞的网络，异步文件操作，子进程等等。

nodejs的event是基于libuv，而浏览器的event loop则在html5的规范中明确定义。

Node中的EventLoop分为6个阶段：
    1、timers：执行setTimeout() 和 setInterval()中到期的callback。
    2、pending callback: 上一轮循环中有少数的I/O callback会被延迟到这一轮的这一阶段执行
    3、idle, prepare：仅内部使用
    4、poll: 最为重要的阶段，执行I/O callback，在适当的条件下会阻塞在这个阶段
    5、check: 执行setImmediate的callback
    6、close callbacks: 执行close事件的callback，例如socket.on('close'[,fn])、http.server.on('close, fn)

setTimeout、setInterval、setImmediate和process.nextTick
    1、setImmediate：在 poll 阶段后执行，即check 阶段
    2、setTimeout 在 poll 空闲时且设定时间到达的时候执行，在 timer 阶段
    3、process.nextTick（）在同一阶段立即触发
    4、setInterval 和 setTimeout 执行不需要I/O线程池的参与。
    5、定时器任务需要调用红黑树，创建定时器对象，迭代等，消耗较大。所以和process.nextTick相比，后者较为轻量。

Node高性能的原因：
    1、Node使用基于事件驱动的方式处理请求，无须为每一个事件建立额外的线程或者进程，极大的减少了创建线程和销毁线程的开销，
    同时系统在调度任务的时候，由于线程较少，切换上下文对象开销降低
